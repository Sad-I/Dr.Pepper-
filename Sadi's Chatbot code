import random


class Weather:
    """
    A class used to represent a forecast for the weather

    ...

    Attributes
    ----------
    location: str
        the city's code for which the forecast is requested
    weather: str
        the lectic weather forecast
    temperature: float
        the forecasted value of the temperature in degrees Celsius in one decimal point
    day1: int
        the day for which the forecast is requested
    time: int
        the time for which the forecast is requested

    Methods
    -------
    locationKey(self):
        gets the location key for the requested city from AccuWeather's location api for use in forecast apis
    weatherNow(self):
        returns the current temperature and weather forecast
    weatherToday(self):
        returns the temperature and weather forecast for sometime in the next 12 hours
    weatherFuture(self):
        returns the temperature and weather forecast for someday in the next 4 days
    """

    def __init__(self,location,weather,temperature,day1,time):
        """
        Constructs all the necessary attributes for the reqested forecast object

        Parameters
        ----------
        location: str
            the city's code for which the forecast is requested
        weather: str
            the lectic weather forecast
        temperature: float
            the forecasted value of the temperature in degrees Celsius in one decimal point
        day1: int
            the day for which the forecast is requested
        time: int
            the time for which the forecast is requested
        """
        #for the standard form of this enclosed code I viewed a youtube tutorial which I referenced on my presentation on class design
        self.weather=weather
        self.location=location
        self.temperature=temperature
        self.day1=day1
        self.time=time
        #---------------------------
    def locationKey(self):
        """
        takes an instance of the needed forecast
        the funcion then replaces the location parameter with the location key of the city
        """

        if self.location== 'CV':
            self.location=326967
            return self.location

    def weatherNow(self):
        """
        takes an instance of the requested forecast
        the function retrieves the current temperature as an integer and weather forecast as a string from Accuweather's Current Conditions Api
        it returns those in a string
        """

        import requests    #the requests module has been downloaded using the pip command in the terminal
        cURL= "http://dataservice.accuweather.com/currentconditions/v1/" + str(self.location) + "?apikey=HbZQKawCUei2yiMW3pi9YdgL196ClSDC"    #inclusion of location parameter for potential addition of locations
        response= requests.get(cURL)    # for this line and the logic behind it, I viewed a youyube tutorial on APIs
        self.temperature= response.json()[0]["Temperature"]["Metric"]["Value"]
        self.weather= response.json()[0]["WeatherText"]
        return "The current temperature in Coventry is "+ str(self.temperature)+ "°C and the weather is "+ str(self.weather)

    def weatherToday(self):
        """
        takes an instance of the requested forecast
        the function retrieves the temperature as an integer and weather forecast up to 11 hours in the future as a string according to the time parameter from AccuWeather's forecast API
        it returns those in a string
        """

        import requests
        cURL= "http://dataservice.accuweather.com/forecasts/v1/hourly/12hour/" + str(self.location) +"?apikey=HbZQKawCUei2yiMW3pi9YdgL196ClSDC&metric=true"    #inclusion of location parameter for potential addition of locations
        response=requests.get(cURL)    # for this line and the logic behind it, I viewed the youtube tutorial I mention above
        self.temperature= response.json()[self.time]["Temperature"]["Value"]
        self.weather= response.json()[self.time]["IconPhrase"]
        self.time=self.time+1
        return str(self.time)+ " hours from now, the temperature in Coventry will be "+str(self.temperature)+ "°C and the weather will be "+str(self.weather)

    def weatherFuture(self):
        """
        takes an instance of the requested forecast
        the function retrieves the maximum and minimum temperatures as an integers and weather forecast someday in the next 4 days as a string according to the day1 parameter from AccuWeather's forecast API
        it calculates the average temperature and returns it along with the weather forecast in a string
        """

        import requests
        cURL="http://dataservice.accuweather.com/forecasts/v1/daily/5day/" + str(self.location) + "?apikey=HbZQKawCUei2yiMW3pi9YdgL196ClSDC&metric=true"    #inclusion of location parameter for potential addition of locations
        response=requests.get(cURL)    # for this line and the logic behind it, I viewed the youtube tutorial I mention above
        self.temperature=round((response.json()["DailyForecasts"][self.day1]["Temperature"]["Minimum"]["Value"]+ response.json()["DailyForecasts"][self.day1]["Temperature"]["Maximum"]["Value"])/2,1)
        self.weather=response.json()["DailyForecasts"][self.day1]["Day"]["IconPhrase"]
        return str(self.day1)+ " days from now, the average temperature will be "+str(self.temperature)+ "°C and the weather will be "+str(self.weather)



def start():
    print("<<< Welcome, I am chattybot. What can I help you with? >>>")
    con()



def con(): # The different dictionaries containting data.
    Greetings = {
        "Hello", "hello" "Hey", "Hi", "What's up", "Salam", "What you saying", "Good day", "Howdy", "Shallom", "Hey what's up?", "What you saying?", "Fam",
        "Yo", "Yoo", "Yooo", "Hii", "Hiii", "Yo what's up?", "Yo what's up?", "Welcome", "Hello there"
        }
    Greeting_Questions = {
        "How are you?", "what you saying?", "How's it going?", "You doing good?",
        "Are you feeling alright", "How's everyting?", "You alright?", "How have you been?", "What's new?",
        "How's your day going?", "How is it going?", "What's up?", "How you doing?", "How are you doing?", 
        }
    Who_Are_You = {
        "What is your name?", "State your name?", "Name?", "You have a name?", "You got a name?", "Who are you?", "What do you do?", "State your purpose",
        "What can you do for me?", "Are you a robot?", "Are you an AI?", "What is your full name?", "Who are you fam?", "What can you do?", "How you feeling?",
        "Do you have feelings?", 
        }
    User_Response = {
        "I'm doing well", "I'm doing fine", "I'm good", "I'm chilling", "I'm good thanks", "I'm good", "I am good thank you", "The sky is up", "I am well thank you", "I'm well", "I'm chill", "Chilling G",
        "I'm swell", "Yea not bad", "Could be better", "Feeling ok", "I'm okay", "I am feeling bad", "Not doing well", "I am sad", "Very bad",
        "Not feeling great", "Pretty sad", "I am good", "I am great", "I'm doing great", "I am doing fine", "Feeling good", "I am feeling good", 
        "Could be ", "I am fine thank you", "I am well", "I'm not too bad", "I'm great"
        }
    User_Request = {
        "I need help", "Can you help me?", "Can you help me please", "Bro help me", "Fam help me", "Help", "Help pls", "I have a problem", 
        "I have a query", "Can you help me with my query", "Can you help me with a query I have?", "Listen I need help", "Listen I need urgent help",
        "I have a urgent query", "I need your assistance", "I request your assistance", "I am in need of your help", "I am in need for your assistance",
        "Help me", "Will you help me?", "Could you give me a hand?", "Will you help me", "Could you give me a hand", "I need your support", "Would you mind helping me?",
        "I need a helping hand", "Could someone help me?", "Could someone help me", "My bro I need help", "I really need your help", "I need some help"
        }
    User_Help = {
        "I need to find my area of study", "I need to find my room of study", "I need to find the study room", "I help locating my study room", 
        "Can you help me find you area of study?", "Can you help me locate my area of study?", "I don't know where I have my lecture", "Can you find my lecture hall?",
        "Can you help me locate my lecture hall?", "I need to find my lecture hall", "I need to find my lecture room", "I help locating my lecture hall", 
        "I need to find my lecture hall", "I don't know where my lecture is", "Can you help me locate my next lecture room?", "I need help locating my lecture hall",
        "I need help finding my lecture hall", 
        }
    User_Response2 = {
        "Ok", "ok", "Not much", "Great", "I guess", "Sure", "sure", "Right", "right", "Nice", "nice", "Well then", "Mmm", "I'm sorry", "Sorry", "Sorry to hear that", "That's sad",
        "I feel bad for you", 
        }
    Age_AI = {
        "Age?", "age", "What is your age?", "Do you have an age?", "When were you born?", "Do you have a birthday?", "What is your birthday?", "What year were you born?", "Birthday?", 
        "Do you have a age?", "Can you tell me your age?", "Give me your age", "Give me your birthday", "Can you explain your birthday", "Please state your birthday", "State your age",
        "Please give me your brithday", "Please give me your age", "Please provide me your age", "Can you give me your birthday", "Can you provide me your birtday", "What's your birthday?"
        "Do you age?", "Do you grow old", "Can you age?", "Can you grow old?", 
        }
    Human = { #update 
        "I want to talk to a human"
        }

    while True:
        user = input()
        user_split = user.split()
        
        try:
            if "weather" in user or "Weather" in user or "temperature" in user or "Temperature" in user:
                WeatherCheck(user)
                break;
            elif user in Greetings:
                A()
                break;
            elif user in Greeting_Questions:
                B()
                break;
            elif user in Who_Are_You:
                C()
                break;
            elif user in User_Response:
                D()
                break;
            elif user in User_Request:
                E()
                break;
            elif user in User_Help:
                Student()
                break;
            elif user in User_Response2:
                F()
                break;
            elif user in Age_AI:
                G()
                break;
            elif user in Human:
                EmailHuman()
                break;
            elif "Geocode" in user_split: # fix capital letter
                Geocode()
                break;
            elif user == "":
                print("Stop pressing enter")

            elif "lecture" in user_split: 
                Student()
            elif "help" in user_split:
                Student()
                break;
            else:
                Special()
        except:
            continue
                
def WeatherCheck(ans):
    if "weather" in ans or "Weather" in ans or "temperature" in ans or "Temperature" in ans:
        print("Would you like the forecast for :")
        print("1. Today    2. Sometime in the next 11 hours    3. Someday in the next 4 days")
        ans= int(input(": "))
        while not ans in range(1,4):
            print("Sorry. Not an option. Would you like the forecast for : ")
            print("1. Today    2. Sometime in the next 11 hours    3. Someday in the next 4 days")
            ans=int(input(": "))
        if ans==1:
            forecast=Weather("CV",None,None,None,None)    # CV is the City code for Coventry and the parameter has been included for possible future addition of locations
            forecast.locationKey()
            print(forecast.weatherNow())
        elif ans==2:
            dt=int(input("How many hours from now? :"))
            while not dt in range(1,12):
                dt=int(input("I can only give you the forecast for a time in the next 11 hours. How many hours from now do you need it for? : "))
            forecast=Weather("CV",None,None,None,dt-1)    #1 has been subtracted from dt to match Api data index 
            forecast.locationKey()
            print(forecast.weatherToday())
        elif ans==3:
            daysFromNow=int(input("How many days from now do you need the forecast for? : "))
            while not daysFromNow in range(0,5):
                daysFromNow= int(input("I can only give you the forecast for a day in the next 4 days. How many days from now do you need it for? : "))
            forecast=Weather("CV",None,None,daysFromNow,None)
            forecast.locationKey()
            print(forecast.weatherFuture())
        print("\n<<< Hello again, welcome back! >>>")
        con()

def A(): # Different responses from our chatbot. 
    x = random.randint(1, 3) 
    if x == 1:
        print("<<< Hey buddy, what can I help you with? >>>")
        con()
    elif x == 2:
        print("<<< Yoo what you saying my G. What can I do for you? >>>")
        con()
    elif x == 3:
        print("<<< Hey, Hey, Hey. What's up? >>>")
        con() 

def B():
    x = random.randint(1, 3)
    if x == 1:
        print("<<< I am good thank you, how are you? >>>")
        con()
    elif x == 2:
        print("<<< I'm good G, What you saying? >>>")
        con()
    elif x == 3:
        print("<<< Yoyo I'm doing well, what's up with you? >>>")
        con()

def C():
    x = random.randint(1, 3)
    if x == 1:
        print("<<< My name is chatty bot. >>>")
        con()
    elif x == 2:
        print("<<< Fam it's me, bad man chatbot. >>>")
        con()
    elif x == 3:
        print("<<< Chattybot! That's the name. >>>")
        con()

def D():
    x = random.randint(1, 3)
    if x == 1:
        print("<<< That's good to hear. >>>")
        con()
    elif x == 2:
        print("<<< Tights G, tight. >>>")
        con()
    elif x == 3:
        print("<<< I am happy for you. >>>")
        con()

def E():
    x = random.randint(1, 3)
    if x == 1:
        print("<<< How may I be of assistance to you? >>>")
        con()
    elif x == 2:
        print("<<< Fam what can I cop for you? >>>")
        con()
    elif x == 3:
        print("<<< I can help! What do you need help with.? >>>")
        con()

def F():
    x = random.randint(1, 3)
    if x == 1:
        print("<<< Great, that's great. >>>")
        con()
    elif x == 2:
        print("<<< Safe G, that's real Safe >>>")
        con()
    elif x == 3:
        print("<<< Mmm okay, nice. :( >>>")
        con()

def G():
    x = random.randint(1, 3)
    if x == 1:
        print("<<< Unfortunatly I don't age nor do I have a birthday. :( >>>")
        con()
    elif x == 2:
        print("<<< You a fed or something, I don't need to give that information G. >>>")
        con()
    elif x == 3:
        print("<<< I might have an age, but my makers don't allow me to count :(. >>>")
        con()


def Name():
    x == random.randint()
    if x == 1:
        print("My name is Chattybot.")
    elif x == 2:
        print("Fam what are you a fed?!")
    elif x == 3:
        print("Name? You know that I am an AI right?")

def Special():
    x = random.randint(1, 6)
    if x == 1:
        print("What do you want me to say?")
    elif x == 2:
        print("Right I hope that helps.")
    elif x == 3:
        print("Why do you ask?")
    elif x == 4:
        print("Computer says no :(")
    elif x == 5:
        print("I guess right?!")
    elif x == 6:
        print("Ok.")


def Student(): # Need the database to connect.
    print("<<< I am sure able to help you with that. >>>")
    print()
    print("<<< Could you please provide me your subject of study >>>")
    user = input()

def EmailHuman():
    import smtplib
    FName = input("What is your forename name? ")
    LName = input("What is your surname name? ")
    Email = input("What is your Email Address? ")
    Number = input("What is your contact number? ")
    Subject = input("Why would you like to speak to a human? ")
    Details = input("Any further details? ")
    Sender = "wayfinderchatbot@gmail.com"
    Password = "wayfinder"
    Emessage = "Hi this is "+FName+" "+LName+" and i am contacting you about "+Subject+". \nFurther details explaining the situation: \n"+Details+"\nThank you for reading my message and i hope you receive it in good health. please contact me on my phone number which is "+Number+" or on my email at "+Email
    server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
    server.login(Sender, Password)
    server.sendmail(Sender, Sender, Emessage)
    server.quit
    EmailLoop = input("Thank You! The Message has been sent and we aim to respond ASAP \nIn the meantime would you like to read the Email you sent? ")
    if EmailLoop == "Yes" or "yes":
        print(Emessage)
        print("Thank you for contacting us we will know redirect you back to the main chatbot! :D")
        print()
        print("<<< Wagwan G >>>")
        con()
    else:
        print("Thank you for contacting us we will know redirect you back to the main chatbot! :D")
        con()

def Geocode():
    cov_uni = {
        "Main campus", "Uni", "uni", "University", "university", "Coventry uni", "Coventry university", "Main building",
        }
    print("*If it is a custom location, please format it as 'Street, City, Country Code'")
    print("*Example: 'Priory St, Coventry, UK'")
    Input = input("Where do you want to Geocode? ")
    if Input in cov_uni:
        from pprint import pprint
        import googlemaps 

        APIKey = "AIzaSyB9lshmc9qMiWXmWMmjA7L9YAXVePkH0XI"

        map_client = googlemaps.Client(APIKey)

        Uni = "Priory St, Coventry, UK"
        reply = map_client.geocode(Uni)
        pprint(reply)
        GeocodeLoop()
    else:
        from pprint import pprint
        import googlemaps 

        APIKey = "AIzaSyB9lshmc9qMiWXmWMmjA7L9YAXVePkH0XI"

        map_client = googlemaps.Client(APIKey)

        Custom = Input
        reply = map_client.geocode(Custom)
        pprint(reply)
        GeocodeLoop()

def GeocodeLoop():
    print("Would you Like to Geocode another location?")
    print("Input Y for Yes")
    print("Or N for No")
    GeoLoopQ = input()
    if GeoLoopQ == "Y":
        Geocode()
    else:
        print("\n<<< Hello again, welcome back! >>>")
        con()


start()
